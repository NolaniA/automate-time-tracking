#!/bin/bash

# ********‚ùå  Note (‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏´‡∏¢‡∏î‡πÅ‡∏´‡∏°‡πà) ‚ùå ******** #

#  ‚úÖ  ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ file ‡∏ä‡∏∑‡πà‡∏≠ config.csv
#  ‚úÖ  ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ  START_DAY , END_DAY ,START_MONTH ,START_YEAR, EMPLOYEE_NAME, PROJECT_NAME ‡πÅ‡∏•‡∏∞ COMPANY 
# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç value ‡πÉ‡∏ô config.csv ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‚úÖ

# üöÄ  ‡∏ß‡∏¥‡∏ò‡∏µ run (cd ‡πÑ‡∏õ‡∏ó‡∏µ‡πà path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô --> cd /your-drive/automate-time-tracking/ )
# 1.  ‡πÄ‡∏õ‡∏¥‡∏î terminal ‡πÅ‡∏•‡πâ‡∏ß run ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á chmod +x timesheet.sh ‡∏Å‡∏î Enter
# 2.  run ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ./timesheet.sh 
# 2 . ‡∏≠‡πà‡∏≤‡∏ô terminal ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏ï‡∏≤‡∏°

# -------------------- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á config.csv ------------------------- #

#    key,value
#    START_DAY,29
#    END_DAY,31
#    START_MONTH,7
#    START_YEAR,2025
#    EMPLOYEE_NAME,‡πÇ‡∏î‡πâ-‡∏û‡∏±‡∏í‡∏ô‡∏û‡∏•
#    PROJECT_NAME,futureskill-b2b-learning-platform25
#    MORNING_WORK,Bug fix i18n content-panel repository
#    DAILY_WORK,Development class management II


# ---------------------------------------------- #


# ********‚ùå  Note (‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏´‡∏¢‡∏î‡πÅ‡∏´‡∏°‡πà ‚ùå ******** #


# ‡∏´‡∏≤ directory ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "üìÅ Script directory: $SCRIPT_DIR"

# ‡πÄ‡∏Ç‡πâ‡∏≤ directory ‡∏ô‡∏±‡πâ‡∏ô
cd "$SCRIPT_DIR" || { echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤ directory ‡πÑ‡∏î‡πâ"; exit 1; }

# 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js ‡πÅ‡∏•‡∏∞ npm
if ! command -v node &> /dev/null
then
    echo "‚ùå Node.js ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js ‡∏Å‡πà‡∏≠‡∏ô"
    exit 1
fi

echo "‚úÖ ‡∏û‡∏ö Node.js ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: $(node -v)"
echo "‚úÖ ‡∏û‡∏ö npm ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: $(npm -v)"

# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á package.json ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if [ ! -f package.json ]; then
  npm init -y
  echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á package.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
fi

# 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå node_modules ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if [ ! -d "node_modules" ]; then
  echo "üìÅ ‡πÑ‡∏°‡πà‡∏û‡∏ö node_modules ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà"
else
  echo "üìÅ ‡∏û‡∏ö node_modules ‡πÅ‡∏•‡πâ‡∏ß"
fi

# 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright
npm list playwright &> /dev/null
if [ $? -ne 0 ]; then
  echo "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright ..."
  npm install playwright
else
  echo "‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à playwright ‡πÅ‡∏•‡πâ‡∏ß"
fi

# 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á date-fns
npm list date-fns &> /dev/null
if [ $? -ne 0 ]; then
  echo "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á date-fns ..."
  npm install date-fns
else
  echo "‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à date-fns ‡πÅ‡∏•‡πâ‡∏ß"
fi

CONFIG_FILE="config.csv"
SCRIPT_FILE="airtable_submit.mjs"

# 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå config.csv ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
if [[ ! -f $CONFIG_FILE ]]; then
  echo "‚ùå Not found: $CONFIG_FILE"
  exit 1
fi

echo "üìÑ Found config: $CONFIG_FILE"

# 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á airtable_submit.mjs ‡πÇ‡∏î‡∏¢‡∏ù‡∏±‡∏á‡πÇ‡∏Ñ‡πâ‡∏î JavaScript ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô config.csv ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
cat << 'EOF' > "$SCRIPT_FILE"
import { readFileSync } from 'fs';
import { chromium } from 'playwright';
import { format, isWeekend } from 'date-fns';

const configText = readFileSync('./config.csv', 'utf-8');
const configLines = configText.trim().split('\n').slice(1); // skip header
const config = {};
for (const line of configLines) {
  const [key, ...rest] = line.split(',');
  const value = rest.join(',').trim(); // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö value ‡∏ó‡∏µ‡πà‡∏°‡∏µ , ‡πÑ‡∏î‡πâ
  if (key && value) config[key.trim()] = value;
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö config ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const REQUIRED_KEYS = ['START_DAY', 'END_DAY', 'START_MONTH', 'START_YEAR', 'EMPLOYEE_NAME', 'PROJECT_NAME'];
for (const key of REQUIRED_KEYS) {
  if (!config[key]) {
    console.error(`‚ùå Missing or empty required config key: ${key}`);
    process.exit(1);
  }
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å string
const START_DAY = Number(config.START_DAY);
const END_DAY = Number(config.END_DAY);
const START_MONTH = Number(config.START_MONTH);
const START_YEAR = Number(config.START_YEAR);

const EMPLOYEE_NAME = config.EMPLOYEE_NAME;
const PROJECT_NAME = config.PROJECT_NAME;
const COMPANY = "FutureSkill";

const ACTIVITY_TYPE = {
  WEEKLY: 'Weekly Update Tech Team',
  RETRO: 'Sprint Retrospective',
  PLANNING: 'Sprint Planning',
  REVIEW: 'Sprint Review',
  DEPLOY: 'Recheck feature before deploy to production',
  DAILY_STANDUP: 'Daily Standup', 
  MORNING_WORK: config.MORNING_WORK || "‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡∏±‡∏ö ux/ui ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ",
  LUNCH_BREAK: "‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
  DAILY_WORK: config.DAILY_WORK || "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô"
};

const SCHEDULE = {
  WEEKLY: { day: 2, frequency: 'every', hours: 1 },
  PLANNING: { day: 1, frequency: 'alternate', hours: 1 },
  DEPLOY: { day: 4, frequency: 'every', hours: 0.5 },
  RETRO: { day: 5, frequency: 'alternate', hours: 1 },
  REVIEW: { day: 5, frequency: 'alternate', hours: 1 },
  DAILY_STANDUP: { day: 'workdays', frequency: 'every', hours: 1 },
  MORNING_WORK: { day: 'workdays', frequency: 'every', hours: 1 },
  LUNCH_BREAK: { day: 'workdays', frequency: 'every', hours: 1 },
  DAILY_WORK: { day: 'workdays', frequency: 'every', hours: 1 }
};

const URL = "https://airtable.com/app6PjJAAPwiRw71N/pagWjJnFT2ZQn7eka/form";


/**
 * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
 * @param {Date} date - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ
 * @param {Date} startDate - ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì alternate
 * @returns {Array} - array ‡∏Ç‡∏≠‡∏á activity types
 */
function getActivitiesForDay(date, startDate) {
  if (isWeekend(date)) {
    return [];
  }

  const activities = [];
  const dayOfWeek = date.getDay(); // 0=Sunday, 1=Monday, ..., 6=Saturday
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö alternate activities
  const weeksSinceStart = Math.floor((date - startDate) / (7 * 24 * 60 * 60 * 1000));
  const isEvenWeek = weeksSinceStart % 2 === 0;

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  for (const [type, schedule] of Object.entries(SCHEDULE)) {
    if (schedule.day === 'daily') {
      // ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞ filter ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß)
      activities.push(type);
    } else if (schedule.day === 'workdays') {
      // ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      activities.push(type);
    } else if (dayOfWeek === schedule.day) {
      if (schedule.frequency === 'every') {
        // ‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
        activities.push(type);
      } else if (schedule.frequency === 'alternate' && isEvenWeek) {
        // ‡πÄ‡∏ß‡πâ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Ñ‡∏π‡πà)
        activities.push(type);
      }
    }
  }

  return activities;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö activity ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
 * @param {string} activity - activity type
 * @returns {Object} - { taskItem, taskNote, taskType, hours }
 */
function createTaskFromSingleActivity(activity) {
  const schedule = SCHEDULE[activity];
  
  let taskType;
  switch (activity) {
    case 'LUNCH_BREAK':
      taskType = 'Idle';
      break;
    case 'MORNING_WORK':
      taskType = 'Create / Do / Work';
      break;
    case 'DAILY_WORK':
      taskType = 'Create / Do / Work';
      break;
    default:
      taskType = 'Internal Meeting';
  }

  return {
    taskType,
    taskItem: ACTIVITY_TYPE[activity],
    taskNote: ACTIVITY_TYPE[activity],
    hours: schedule ? schedule.hours.toString() : '1'
  };
}

(async () => {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext({
    viewport: { width: 1250, height: 600 },
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
    // storageState: './trackingstate.json'
  });
  const page = await context.newPage();
  await page.goto(URL, { waitUntil: 'domcontentloaded' });

  console.log("Please login manually and press ENTER to continue...");
  await new Promise(resolve => process.stdin.once('data', resolve));

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á workdays ‡∏û‡∏£‡πâ‡∏≠‡∏° activity schedule
  const workdays = [];
  const totalDays = END_DAY - START_DAY + 1;
  const startDate = new Date(START_YEAR, START_MONTH - 1, 1); // reference date

  for (let i = 0; i < totalDays; i++) {
    const currentDate = new Date(START_YEAR, START_MONTH - 1, START_DAY + i);
    console.log("day", currentDate);
    
    if (!isWeekend(currentDate)) {
      const activities = getActivitiesForDay(currentDate, startDate);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ activity
      const dayTasks = [];
      if (activities.length === 0) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ activity ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà Development
        dayTasks.push({
          activity: 'DEVELOPMENT',
          ...createTaskFromSingleActivity('DEVELOPMENT')
        });
      } else {
        // ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ activity ‡πÄ‡∏õ‡πá‡∏ô task ‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
        activities.forEach(activity => {
          dayTasks.push({
            activity: activity,
            ...createTaskFromSingleActivity(activity)
          });
        });
      }

      workdays.push({
        date: format(currentDate, 'yyyy/M/dd'),
        dayName: format(currentDate, 'EEEE'),
        tasks: dayTasks
      });
    }
  }

  console.log('\nüìÖ Work Schedule:');
  workdays.forEach(day => {
    console.log(`\n${day.date} (${day.dayName}):`);
    day.tasks.forEach((task, index) => {
      console.log(`  ${index + 1}. Activity: ${task.activity} | Type: ${task.taskType} | Item: ${task.taskItem} | Hours: ${task.hours}h`);
    });
  });

  for (const dayData of workdays) {
    console.log(`\nüóìÔ∏è Starting ${dayData.date} (${dayData.dayName}) - ${dayData.tasks.length} tasks`);
    
    for (let taskIndex = 0; taskIndex < dayData.tasks.length; taskIndex++) {
      const task = dayData.tasks[taskIndex];
      console.log(`\nüîÑ Processing Task ${taskIndex + 1}/${dayData.tasks.length}: ${task.activity} - ${task.taskItem} (${task.hours}h)...`);
      
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
      await page.waitForLoadState('networkidle');
      await page.waitForSelector('button[type="submit"]', { timeout: 120000 });
      
      // ‡∏Ñ‡∏•‡∏¥‡∏Å submit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
      await page.click('button[type="submit"]');
      console.log('‚úÖ Clicked submit button');

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° unlink ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å
      try {
        const unlinkBtn = page.locator('div[data-testid="unlink-foreign-key"]');
        await unlinkBtn.waitFor({ state: 'visible', timeout: 10000 });
        await unlinkBtn.hover();
        await page.waitForTimeout(500);
        await unlinkBtn.click();
        await unlinkBtn.waitFor({ state: 'detached', timeout: 60000 });
        console.log('‚úÖ Cleared auto-fill');
      } catch (error) {
        console.log('‚ÑπÔ∏è No unlink button found, continuing...');
      }

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ error message ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
      await page.waitForSelector('text=This field is required.', { timeout: 120000 });
      console.log('‚úÖ Form validation appeared');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      console.log(`üìÖ Filling date: ${dayData.date}`);
      const dateInput = page.locator('input.date');
      await dateInput.click();
      await page.keyboard.press('Control+a');
      await page.keyboard.type(`${dayData.date}`, { delay: 150 });
      await dateInput.waitFor({ state: 'visible' });
      await page.keyboard.press('Tab');
      await page.waitForTimeout(1000);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
      const dateValue = await dateInput.inputValue();
      console.log(`Date filled: ${dateValue}`);

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
      console.log(`üë§ Filling employee: ${EMPLOYEE_NAME}`);
      await page.click('button[aria-label="Add employee to Employee field"]');
      await page.waitForSelector('div[data-testid="search-input"] input', { state: 'visible' });
      const employeeInput = page.locator('div[data-testid="search-input"] input');
      await employeeInput.clear();
      await employeeInput.fill(EMPLOYEE_NAME);
      await page.keyboard.press('Enter');
      await page.waitForSelector(`text=${EMPLOYEE_NAME}`, { timeout: 120000 });
      console.log('‚úÖ Employee selected');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
      console.log(`üìÅ Filling project: ${PROJECT_NAME}`);
      await page.click('button[aria-label="Add project to Project ID field"]');
      await page.waitForSelector('div[data-testid="search-input"] input', { state: 'visible' });
      const projectInput = page.locator('div[data-testid="search-input"] input');
      await projectInput.clear();
      await projectInput.fill(PROJECT_NAME);
      await page.keyboard.press('Enter');
      await page.waitForSelector(`text=${PROJECT_NAME}`, { timeout: 120000 });
      console.log('‚úÖ Project selected');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
      console.log(`üè¢ Filling company: ${COMPANY}`);
      await page.click('div[data-tutorial-selector-id="pageCellLabelPairCompany"] button');
      await page.waitForTimeout(500);
      await page.keyboard.type(COMPANY, { delay: 100 });
      await page.keyboard.press('Enter');
      await page.waitForSelector(`div >> text="${COMPANY}"`, { timeout: 120000 });
      console.log('‚úÖ Company selected');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
      console.log(`üìã Filling task type: ${task.taskType}`);
      await page.click('div[data-testid="autocomplete-button"]');
      await page.waitForTimeout(500);
      await page.keyboard.type(task.taskType, { delay: 50 });
      await page.keyboard.press('Enter');
      await page.waitForSelector(`div[title="${task.taskType}"]`, { timeout: 120000 });
      console.log('‚úÖ Task type selected');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
      console.log(`üìù Filling task item: ${task.taskItem}`);
      await page.click('div[data-tutorial-selector-id="pageCellLabelPairTaskItem"] div[data-testid="cell-editor"]');
      await page.waitForTimeout(500);
      await page.keyboard.type(task.taskItem, { delay: 50 });
      await page.keyboard.press('Enter');
      await page.waitForSelector(`text=${task.taskItem}`, { timeout: 120000 });
      console.log('‚úÖ Task item filled');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
      console.log(`üìã Filling task note: ${task.taskNote}`);
      await page.click('div[data-tutorial-selector-id="pageCellLabelPairTaskNote"] div[data-testid="cell-editor"]');
      await page.waitForTimeout(500);
      await page.keyboard.type(task.taskNote, { delay: 50 });
      await page.keyboard.press('Enter');
      await page.waitForSelector(`textarea >> text=${task.taskNote}`, { timeout: 120000 });
      console.log('‚úÖ Task note filled');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      console.log(`‚è∞ Filling hours: ${task.hours}`);
      const hoursInput = page.locator('div[data-tutorial-selector-id="pageCellLabelPairSpentHours"] input');
      await hoursInput.click();
      await hoursInput.clear();
      await hoursInput.fill(task.hours);
      await page.keyboard.press('Tab');
      console.log('‚úÖ Hours filled');

      // ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
      console.log('üì§ Submitting form...');
      await page.click('button[type="submit"]');

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
      await page.waitForSelector('div.refreshButton', { timeout: 200000 });
      console.log('‚úÖ Form submitted successfully');

      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° refresh
      await page.click('div.refreshButton');
      await page.waitForTimeout(2000);
      console.log('üîÑ Page refreshed');
      
      console.log(`‚ú® Task ${taskIndex + 1}/${dayData.tasks.length} completed: ${task.activity}`);
    }
    
    console.log(`üéØ Day ${dayData.date} completed! All ${dayData.tasks.length} tasks submitted.`);
  }

  console.log("\nüéâ Done! All entries completed successfully.");
  await browser.close();
})();
EOF
echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå $SCRIPT_FILE ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"

echo "üõ†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô airtable_submit.mjs..."

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£
OS_TYPE=$(uname)

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á sed ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ yyyy/M/dd ‚Üí MM/dd/yyyy
if [[ "$OS_TYPE" == "Darwin" ]]; then
  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö macOS
  sed -i '' "s/format(currentDate, 'yyyy\/M\/dd')/format(currentDate, 'MM\/dd\/yyyy')/g" "$SCRIPT_FILE"
elif [[ "$OS_TYPE" == "Linux" ]]; then
  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linux
  sed -i "s/format(currentDate, 'yyyy\/M\/dd')/format(currentDate, 'MM\/dd\/yyyy')/g" "$SCRIPT_FILE"
else
  echo "‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö OS ‡∏ô‡∏µ‡πâ: $OS_TYPE"
  exit 1
fi

echo "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô airtable_submit.mjs ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"


# 7. ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
echo "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå..."
node "$SCRIPT_FILE"

echo "‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"