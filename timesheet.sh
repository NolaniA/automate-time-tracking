#!/bin/bash

# ü§ñ Automated Timesheet Submission Tool
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô README(for playwright).md

# ‡∏´‡∏≤ directory ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "üìÅ Script directory: $SCRIPT_DIR"

# ‡πÄ‡∏Ç‡πâ‡∏≤ directory ‡∏ô‡∏±‡πâ‡∏ô
cd "$SCRIPT_DIR" || { echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤ directory ‡πÑ‡∏î‡πâ"; exit 1; }

# 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js ‡πÅ‡∏•‡∏∞ npm
if ! command -v node &> /dev/null
then
    echo "‚ùå Node.js ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js ‡∏Å‡πà‡∏≠‡∏ô"
    exit 1
fi

echo "‚úÖ ‡∏û‡∏ö Node.js ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: $(node -v)"
echo "‚úÖ ‡∏û‡∏ö npm ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: $(npm -v)"

# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á package.json ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if [ ! -f package.json ]; then
  echo "üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á package.json..."
  npm init -y > /dev/null
  echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á package.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
fi

# 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå node_modules ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if [ ! -d "node_modules" ]; then
  echo "üìÅ ‡πÑ‡∏°‡πà‡∏û‡∏ö node_modules ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà"
else
  echo "üìÅ ‡∏û‡∏ö node_modules ‡πÅ‡∏•‡πâ‡∏ß"
fi

# 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright
echo "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö playwright..."
npm list playwright &> /dev/null
if [ $? -ne 0 ]; then
  echo "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright..."
  echo "‚è≥ ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠..."
  
  # ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright
  npm install playwright --no-optional --verbose
  
  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if npm list playwright &> /dev/null; then
    echo "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
  else
    echo "‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    echo "üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô..."
    
    # ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ flags
    npm install playwright
    
    if npm list playwright &> /dev/null; then
      echo "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2)"
    else
      echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á playwright ‡πÑ‡∏î‡πâ"
      echo "üìã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á:"
      echo "   npm install playwright"
      exit 1
    fi
  fi
else
  echo "‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à playwright ‡πÅ‡∏•‡πâ‡∏ß"
fi

# 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á date-fns
echo "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö date-fns..."
npm list date-fns &> /dev/null
if [ $? -ne 0 ]; then
  echo "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á date-fns..."
  npm install date-fns
  if npm list date-fns &> /dev/null; then
    echo "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á date-fns ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
  else
    echo "‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á date-fns ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    exit 1
  fi
else
  echo "‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à date-fns ‡πÅ‡∏•‡πâ‡∏ß"
fi

CONFIG_FILE="config.csv"
DAILY_TASKS_FILE="daily_tasks.json"
SCHEDULED_ACTIVITIES_FILE="scheduled_activities.json"
SCRIPT_FILE="airtable_submit.mjs"

# 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå config.csv ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
if [[ ! -f $CONFIG_FILE ]]; then
  echo "‚ùå Not found: $CONFIG_FILE"
  exit 1
fi

echo "üìÑ Found config: $CONFIG_FILE"

# 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå scheduled_activities.json ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if [[ ! -f $SCHEDULED_ACTIVITIES_FILE ]]; then
  echo "üìÑ Creating sample $SCHEDULED_ACTIVITIES_FILE..."
  cat << 'EOF' > "$SCHEDULED_ACTIVITIES_FILE"
{
  "activities": {
    "WEEKLY": "Weekly Update Tech Team",
    "RETRO": "Sprint Retrospective", 
    "PLANNING": "Sprint Planning",
    "REVIEW": "Sprint Review",
    "DEPLOY": "Recheck feature before deploy to production",
    "DAILY_STANDUP": "Daily Standup",
    "LUNCH_BREAK": "‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á"
  },
  "schedule": {
    "WEEKLY": { "day": 2, "frequency": "every", "hours": 1 },
    "PLANNING": { "day": 1, "frequency": "alternate", "hours": 1 },
    "DEPLOY": { "day": 4, "frequency": "every", "hours": 0.5 },
    "RETRO": { "day": 5, "frequency": "alternate", "hours": 1 },
    "REVIEW": { "day": 5, "frequency": "alternate", "hours": 1 },
    "DAILY_STANDUP": { "day": "workdays", "frequency": "every", "hours": 1 },
    "LUNCH_BREAK": { "day": "workdays", "frequency": "every", "hours": 1 }
  }
}
EOF
  echo "‚úÖ Created sample $SCHEDULED_ACTIVITIES_FILE"
  echo "üìã day: 1=‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 2=‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£ 3=‡∏û‡∏∏‡∏ò 4=‡∏û‡∏§‡∏´‡∏±‡∏™ 5=‡∏®‡∏∏‡∏Å‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠ \"workdays\""
  echo "üìã frequency: \"every\"=‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏´‡∏£‡∏∑‡∏≠ \"alternate\"=‡πÄ‡∏ß‡πâ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
fi

# 8. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå daily_tasks.json ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if [[ ! -f $DAILY_TASKS_FILE ]]; then
  echo "üìÑ Creating sample $DAILY_TASKS_FILE..."
  cat << 'EOF' > "$DAILY_TASKS_FILE"
{
  "2025-07-29": [
    {
      "task": "Fix authentication bug in login module",
      "type": "work",
      "hours": "2"
    }
  ]
}
EOF
  echo "‚úÖ Created sample $DAILY_TASKS_FILE - Please customize it for your needs"
  echo "üìã Available task types: work, audit, plan, coordinate, meeting, idle, leave"
  echo "‚ÑπÔ∏è  Days without daily_tasks will only have scheduled activities"
fi

# 9. ‡∏™‡∏£‡πâ‡∏≤‡∏á airtable_submit.mjs ‡πÇ‡∏î‡∏¢‡∏ù‡∏±‡∏á‡πÇ‡∏Ñ‡πâ‡∏î JavaScript ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô config.csv ‡πÅ‡∏•‡∏∞ JSON files
cat << 'EOF' > "$SCRIPT_FILE"
import { readFileSync } from 'fs';
import { chromium } from 'playwright';
import { format, isWeekend } from 'date-fns';

// ‡∏≠‡πà‡∏≤‡∏ô config.csv
const configText = readFileSync('./config.csv', 'utf-8');
const configLines = configText.trim().split('\n').slice(1); // skip header
const config = {};
for (const line of configLines) {
  const [key, ...rest] = line.split(',');
  const value = rest.join(',').trim(); // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö value ‡∏ó‡∏µ‡πà‡∏°‡∏µ , ‡πÑ‡∏î‡πâ
  if (key && value) config[key.trim()] = value;
}

// ‡∏≠‡πà‡∏≤‡∏ô scheduled_activities.json
let scheduledData = {};
try {
  const scheduledText = readFileSync('./scheduled_activities.json', 'utf-8');
  scheduledData = JSON.parse(scheduledText);
  console.log('‚úÖ Loaded scheduled activities configuration');
} catch (error) {
  console.error('‚ùå Error reading scheduled_activities.json:', error.message);
  process.exit(1);
}

// ‡∏≠‡πà‡∏≤‡∏ô daily_tasks.json
let dailyTasks = {};
try {
  const dailyTasksText = readFileSync('./daily_tasks.json', 'utf-8');
  dailyTasks = JSON.parse(dailyTasksText);
  console.log('‚úÖ Loaded daily tasks configuration');
} catch (error) {
  console.error('‚ùå Error reading daily_tasks.json:', error.message);
  process.exit(1);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö config ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const REQUIRED_KEYS = ['START_DAY', 'END_DAY', 'START_MONTH', 'START_YEAR', 'EMPLOYEE_NAME', 'PROJECT_NAME'];
for (const key of REQUIRED_KEYS) {
  if (!config[key]) {
    console.error(`‚ùå Missing or empty required config key: ${key}`);
    process.exit(1);
  }
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å string
const START_DAY = Number(config.START_DAY);
const END_DAY = Number(config.END_DAY);
const START_MONTH = Number(config.START_MONTH);
const START_YEAR = Number(config.START_YEAR);

const EMPLOYEE_NAME = config.EMPLOYEE_NAME;
const PROJECT_NAME = config.PROJECT_NAME;
const COMPANY = config.COMPANY || "FutureSkill";

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å scheduled_activities.json
const ACTIVITY_TYPE = scheduledData.activities || {};
const SCHEDULE = scheduledData.schedule || {};

// Task Type Mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö daily tasks
const TASK_TYPE_MAPPING = {
  'work': 'Create / Do / Work',
  'audit': 'Audit Work',
  'plan': 'Plan / Think', 
  'coordinate': 'Co-Ordinate',
  'meeting': 'Internal Meeting',
  'idle': 'Idle',
  'leave': 'Leave',
  'other' : 'Other'
};

const URL = "https://airtable.com/app6PjJAAPwiRw71N/pagWjJnFT2ZQn7eka/form";

/**
 * ‡∏î‡∏∂‡∏á daily tasks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 * @param {string} dateStr - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
 * @returns {Array} - array ‡∏Ç‡∏≠‡∏á daily tasks ‡∏´‡∏£‡∏∑‡∏≠ empty array ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
 */
function getDailyTasksForDate(dateStr) {
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ task ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ return
  if (dailyTasks[dateStr]) {
    return dailyTasks[dateStr];
  }
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ return empty array (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ default)
  return [];
}

/**
 * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á (‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å daily tasks)
 * @param {Date} date - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ
 * @param {Date} startDate - ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì alternate
 * @returns {Array} - array ‡∏Ç‡∏≠‡∏á activity types
 */
function getScheduledActivitiesForDay(date, startDate) {
  if (isWeekend(date)) {
    return [];
  }

  const activities = [];
  const dayOfWeek = date.getDay(); // 0=Sunday, 1=Monday, ..., 6=Saturday
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö alternate activities
  const weeksSinceStart = Math.floor((date - startDate) / (7 * 24 * 60 * 60 * 1000));
  const isEvenWeek = weeksSinceStart % 2 === 0;

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  for (const [type, schedule] of Object.entries(SCHEDULE)) {
    if (schedule.day === 'workdays') {
      // ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      activities.push(type);
    } else if (dayOfWeek === schedule.day) {
      if (schedule.frequency === 'every') {
        // ‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
        activities.push(type);
      } else if (schedule.frequency === 'alternate' && isEvenWeek) {
        // ‡πÄ‡∏ß‡πâ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Ñ‡∏π‡πà)
        activities.push(type);
      }
    }
  }

  return activities;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scheduled activity
 * @param {string} activity - activity type
 * @returns {Object} - { taskItem, taskNote, taskType, hours }
 */
function createTaskFromActivity(activity) {
  const schedule = SCHEDULE[activity];
  
  let taskType;
  switch (activity) {
    case 'LUNCH_BREAK':
      taskType = 'Idle';
      break;
    default:
      taskType = 'Internal Meeting';
  }

  return {
    taskType,
    taskItem: ACTIVITY_TYPE[activity],
    taskNote: ACTIVITY_TYPE[activity],
    hours: schedule ? schedule.hours.toString() : '1'
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö daily work
 * @param {Object} dailyTask - daily task object
 * @returns {Object} - { taskItem, taskNote, taskType, hours }
 */
function createTaskFromDailyWork(dailyTask) {
  // ‡πÅ‡∏õ‡∏•‡∏á short type ‡πÄ‡∏õ‡πá‡∏ô full type name
  const fullTaskType = TASK_TYPE_MAPPING[dailyTask.type] || 'Create / Do / Work';
  
  return {
    taskType: fullTaskType,
    taskItem: dailyTask.task,
    taskNote: dailyTask.task,
    hours: dailyTask.hours
  };
}

(async () => {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext({
    viewport: { width: 1250, height: 600 },
    userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
  });
  const page = await context.newPage();
  await page.goto(URL, { waitUntil: 'domcontentloaded' });

  console.log("Please login manually and press ENTER to continue...");
  await new Promise(resolve => process.stdin.once('data', resolve));

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á workdays ‡∏û‡∏£‡πâ‡∏≠‡∏° activity schedule
  const workdays = [];
  const totalDays = END_DAY - START_DAY + 1;
  const startDate = new Date(START_YEAR, START_MONTH - 1, 1); // reference date

  for (let i = 0; i < totalDays; i++) {
    const currentDate = new Date(START_YEAR, START_MONTH - 1, START_DAY + i);
    const dateStr = format(currentDate, 'yyyy-MM-dd');
    console.log("Processing day:", dateStr);
    
    if (!isWeekend(currentDate)) {
      // ‡∏î‡∏∂‡∏á scheduled activities (meetings, breaks, etc.)
      const scheduledActivities = getScheduledActivitiesForDay(currentDate, startDate);
      
      // ‡∏î‡∏∂‡∏á daily tasks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const dayTasks = getDailyTasksForDate(dateStr);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á task array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const allTasks = [];
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° scheduled activities
      scheduledActivities.forEach(activity => {
        allTasks.push({
          activity: activity,
          source: 'scheduled',
          ...createTaskFromActivity(activity)
        });
      });
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° daily tasks
      dayTasks.forEach((dailyTask, index) => {
        allTasks.push({
          activity: `DAILY_WORK_${index + 1}`,
          source: 'daily',
          ...createTaskFromDailyWork(dailyTask)
        });
      });

      workdays.push({
        date: format(currentDate, 'yyyy/MM/dd'),
        dayName: format(currentDate, 'EEEE'),
        tasks: allTasks
      });
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á work schedule
  console.log('\nüìÖ Work Schedule:');
  workdays.forEach(day => {
    console.log(`\n${day.date} (${day.dayName}):`);
    day.tasks.forEach((task, index) => {
      const source = task.source === 'scheduled' ? 'üìÖ' : 'üíª';
      console.log(`  ${source} ${index + 1}. ${task.activity} | Type: ${task.taskType} | Item: ${task.taskItem} | Hours: ${task.hours}h`);
    });
    const totalHours = day.tasks.reduce((sum, task) => sum + parseFloat(task.hours), 0);
    console.log(`  üïê Total hours: ${totalHours}h`);
  });

  // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  for (const dayData of workdays) {
    console.log(`\nüóìÔ∏è Starting ${dayData.date} (${dayData.dayName}) - ${dayData.tasks.length} tasks`);
    
    for (let taskIndex = 0; taskIndex < dayData.tasks.length; taskIndex++) {
      const task = dayData.tasks[taskIndex];
      console.log(`\nüîÑ Processing Task ${taskIndex + 1}/${dayData.tasks.length}: ${task.activity} - ${task.taskItem} (${task.hours}h)...`);
      
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
      await page.waitForLoadState('networkidle');
      await page.waitForSelector('button[type="submit"]', { timeout: 120000 });
      
      // ‡∏Ñ‡∏•‡∏¥‡∏Å submit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
      await page.click('button[type="submit"]');
      console.log('‚úÖ Clicked submit button');

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° unlink ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å
      try {
        const unlinkBtn = page.locator('div[data-testid="unlink-foreign-key"]');
        await unlinkBtn.waitFor({ state: 'visible', timeout: 10000 });
        await unlinkBtn.hover();
        await page.waitForTimeout(500);
        await unlinkBtn.click();
        await unlinkBtn.waitFor({ state: 'detached', timeout: 60000 });
        console.log('‚úÖ Cleared auto-fill');
      } catch (error) {
        console.log('‚ÑπÔ∏è No unlink button found, continuing...');
      }

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ error message ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
      await page.waitForSelector('text=This field is required.', { timeout: 120000 });
      console.log('‚úÖ Form validation appeared');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      console.log(`üìÖ Filling date: ${dayData.date}`);
      const dateInput = page.locator('input.date');
      await dateInput.click();
      await page.keyboard.press('Control+a');
      await page.keyboard.type(`${dayData.date}`, { delay: 150 });
      await dateInput.waitFor({ state: 'visible' });
      await page.keyboard.press('Tab');
      await page.waitForTimeout(1000);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
      const dateValue = await dateInput.inputValue();
      console.log(`Date filled: ${dateValue}`);

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
      console.log(`üë§ Filling employee: ${EMPLOYEE_NAME}`);
      await page.click('button[aria-label="Add employee to Employee field"]');
      await page.waitForSelector('div[data-testid="search-input"] input', { state: 'visible' });
      const employeeInput = page.locator('div[data-testid="search-input"] input');
      await employeeInput.clear();
      await employeeInput.fill(EMPLOYEE_NAME);
      await page.keyboard.press('Enter');
      await page.waitForSelector(`text=${EMPLOYEE_NAME}`, { timeout: 120000 });
      console.log('‚úÖ Employee selected');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
      console.log(`üìÅ Filling project: ${PROJECT_NAME}`);
      await page.click('button[aria-label="Add project to Project ID field"]');
      await page.waitForSelector('div[data-testid="search-input"] input', { state: 'visible' });
      const projectInput = page.locator('div[data-testid="search-input"] input');
      await projectInput.clear();
      await projectInput.fill(PROJECT_NAME);
      await page.keyboard.press('Enter');
      await page.waitForSelector(`text=${PROJECT_NAME}`, { timeout: 120000 });
      console.log('‚úÖ Project selected');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
      console.log(`üè¢ Filling company: ${COMPANY}`);
      await page.click('div[data-tutorial-selector-id="pageCellLabelPairCompany"] button');
      await page.waitForTimeout(500);
      await page.keyboard.type(COMPANY, { delay: 100 });
      await page.keyboard.press('Enter');
      await page.waitForSelector(`div >> text="${COMPANY}"`, { timeout: 120000 });
      console.log('‚úÖ Company selected');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
      console.log(`üìã Filling task type: ${task.taskType}`);
      await page.click('div[data-testid="autocomplete-button"]');
      await page.waitForTimeout(500);
      await page.keyboard.type(task.taskType, { delay: 50 });
      await page.keyboard.press('Enter');
      await page.waitForSelector(`div[title="${task.taskType}"]`, { timeout: 120000 });
      console.log('‚úÖ Task type selected');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
      console.log(`üìù Filling task item: ${task.taskItem}`);
      await page.click('div[data-tutorial-selector-id="pageCellLabelPairTaskItem"] div[data-testid="cell-editor"]');
      await page.waitForTimeout(500);
      await page.keyboard.type(task.taskItem, { delay: 50 });
      await page.keyboard.press('Enter');
      await page.waitForSelector(`text=${task.taskItem}`, { timeout: 120000 });
      console.log('‚úÖ Task item filled');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
      console.log(`üìã Filling task note: ${task.taskNote}`);
      await page.click('div[data-tutorial-selector-id="pageCellLabelPairTaskNote"] div[data-testid="cell-editor"]');
      await page.waitForTimeout(500);
      await page.keyboard.type(task.taskNote, { delay: 50 });
      await page.keyboard.press('Enter');
      await page.waitForSelector(`textarea >> text=${task.taskNote}`, { timeout: 120000 });
      console.log('‚úÖ Task note filled');

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      console.log(`‚è∞ Filling hours: ${task.hours}`);
      const hoursInput = page.locator('div[data-tutorial-selector-id="pageCellLabelPairSpentHours"] input');
      await hoursInput.click();
      await hoursInput.clear();
      await hoursInput.fill(task.hours);
      await page.keyboard.press('Tab');
      console.log('‚úÖ Hours filled');

      // ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
      console.log('üì§ Submitting form...');
      await page.click('button[type="submit"]');

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
      await page.waitForSelector('div.refreshButton', { timeout: 200000 });
      console.log('‚úÖ Form submitted successfully');

      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° refresh
      await page.click('div.refreshButton');
      await page.waitForTimeout(2000);
      console.log('üîÑ Page refreshed');
      
      console.log(`‚ú® Task ${taskIndex + 1}/${dayData.tasks.length} completed: ${task.activity}`);
    }
    
    console.log(`üéØ Day ${dayData.date} completed! All ${dayData.tasks.length} tasks submitted.`);
  }

  console.log("\nüéâ Done! All entries completed successfully.");
  await browser.close();
})();
EOF

echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå $SCRIPT_FILE ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"

# 10. ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
echo "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå..."
node "$SCRIPT_FILE"

echo "‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"